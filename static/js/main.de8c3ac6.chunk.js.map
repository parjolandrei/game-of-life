{"version":3,"sources":["index.js"],"names":["Main","props","slow","speed","playButton","fast","clear","setState","gridFull","Array","rows","fill","map","cols","generation","clearInterval","intervalId","gridSize","size","selectBox","row","col","gridCopy","arrayClone","state","seed","seedGrid","r","c","Math","floor","random","play","g","g2","i","j","count","pauseButton","setInterval","this","Buttons","Grid","className","href","target","Component","handleSelect","e","onClick","title","id","onSelect","Item","eventKey","width","rowsArr","boxClass","boxId","push","Box","key","style","arr","JSON","parse","stringify","App","React","memo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de8c3ac6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ButtonToolbar, Dropdown, DropdownButton } from \"react-bootstrap\";\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.speed = 100;\n    this.rows = 30;\n    this.cols = 50;\n\n    this.state = {\n      generation: 0,\n      gridFull: Array(this.rows)\n        .fill()\n        .map(() => Array(this.cols).fill(false))\n    };\n  }\n\n  slow = () => {\n    this.speed = 1000;\n    this.playButton();\n  };\n\n  fast = () => {\n    this.speed = 100;\n    this.playButton();\n  };\n  clear = () => {\n    this.setState({\n      gridFull: Array(this.rows)\n        .fill()\n        .map(() => Array(this.cols).fill(false)),\n      generation: 0\n    });\n    clearInterval(this.intervalId);\n  };\n\n  gridSize = size => {\n    switch (size) {\n      case \"1\":\n        this.cols = 20;\n        this.rows = 10;\n        break;\n      case \"2\":\n        this.cols = 50;\n        this.rows = 30;\n        break;\n      default:\n        this.cols = 70;\n        this.rows = 50;\n    }\n    this.clear();\n  };\n\n  selectBox = (row, col) => {\n    let gridCopy = arrayClone(this.state.gridFull);\n    gridCopy[row][col] = !gridCopy[row][col];\n\n    this.setState({ gridFull: gridCopy });\n  };\n\n  seed = () => {\n    let seedGrid = this.state.gridFull.map(r =>\n      r.map(c => {\n        if (Math.floor(Math.random() * 4) == 1) {\n          return true;\n        } else {\n          return false;\n        }\n      })\n    );\n    this.setState({ gridFull: seedGrid });\n  };\n\n  play = () => {\n    let g = this.state.gridFull;\n    let g2 = arrayClone(this.state.gridFull);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let count = 0;\n\n        if (i > 0) if (g[i - 1][j]) count++;\n        if (i < this.rows - 1) if (g[i + 1][j]) count++;\n        if (j > 0) if (g[i][j - 1]) count++;\n        if (j < this.cols - 1) if (g[i][j + 1]) count++;\n        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n        if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n        if (i < this.rows - 1 && j < this.cols - 1)\n          if (g[i + 1][j + 1]) count++;\n        if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n        if (!g[i][j] && count === 3) g2[i][j] = true;\n      }\n    }\n\n    this.setState({ gridFull: g2, generation: this.state.generation + 1 });\n  };\n  pauseButton = () => {\n    clearInterval(this.intervalId);\n  };\n  playButton = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.play, this.speed);\n  };\n\n  componentDidMount() {\n    this.seed();\n  }\n  render() {\n    return (\n      <div>\n        <h1>The Game Of Life</h1>\n        <Buttons\n          playButton={this.playButton}\n          pauseButton={this.pauseButton}\n          slow={this.slow}\n          fast={this.fast}\n          clear={this.clear}\n          seed={this.seed}\n          gridSize={this.gridSize}\n        />\n        <Grid\n          gridFull={this.state.gridFull}\n          rows={this.rows}\n          cols={this.cols}\n          selectBox={this.selectBox}\n        />\n        <h2>Generations : {this.state.generation}</h2>\n        <div className=\"rules\">\n          <h2>Rules</h2>\n          <ol>\n            <li>\n              Any live cell with fewer than two live neighbours dies, as if by\n              underpopulation.\n            </li>\n            <li>\n              Any live cell with two or three live neighbours lives on to the\n              next generation.\n            </li>\n            <li>\n              Any live cell with more than three live neighbours dies, as if by\n              overpopulation.\n            </li>\n            <li>\n              Any dead cell with exactly three live neighbours becomes a live\n              cell, as if by reproduction.\n              <br />\n              <a\n                href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n                target=\"_blank\"\n              >\n                Find out more here\n              </a>\n            </li>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Buttons extends Component {\n  handleSelect = e => {\n    this.props.gridSize(e);\n  };\n  render() {\n    return (\n      <div className=\"center\">\n        <ButtonToolbar>\n          <button\n            className=\"btn btn-light text-dark text-center\"\n            onClick={this.props.playButton}\n          >\n            Play\n          </button>\n          <button\n            className=\"btn btn-light text-dark text-center\"\n            onClick={this.props.pauseButton}\n          >\n            Pause\n          </button>\n          <button\n            className=\"btn btn-light text-dark text-center\"\n            onClick={this.props.clear}\n          >\n            Clear\n          </button>\n          <button\n            className=\"btn btn-light text-dark text-center\"\n            onClick={this.props.slow}\n          >\n            Slow\n          </button>\n          <button\n            className=\"btn btn-light text-dark text-center\"\n            onClick={this.props.fast}\n          >\n            Fast\n          </button>\n          <button\n            className=\"btn btn-light text-dark text-center\"\n            onClick={this.props.seed}\n          >\n            Seed\n          </button>\n          <DropdownButton\n            title=\"Grid size\"\n            id=\"size-menu\"\n            onSelect={this.handleSelect}\n          >\n            <Dropdown.Item eventKey=\"1\">20x10</Dropdown.Item>\n            <Dropdown.Item eventKey=\"2\">50x30</Dropdown.Item>\n            <Dropdown.Item eventKey=\"3\">70x50</Dropdown.Item>\n          </DropdownButton>\n        </ButtonToolbar>\n      </div>\n    );\n  }\n}\n\nclass Grid extends Component {\n  render() {\n    const width = this.props.cols * 14;\n    var rowsArr = [];\n    var boxClass = \"\";\n    for (var i = 0; i < this.props.rows; i++) {\n      for (var j = 0; j < this.props.cols; j++) {\n        let boxId = i + \"_\" + j;\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push(\n          <Box\n            boxClass={boxClass}\n            key={boxId}\n            boxId={boxId}\n            row={i}\n            col={j}\n            selectBox={this.props.selectBox}\n          />\n        );\n      }\n    }\n    return (\n      <div className=\"grid\" style={{ width: width }}>\n        {rowsArr}\n      </div>\n    );\n  }\n}\nclass Box extends Component {\n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.col);\n  };\n  render() {\n    return (\n      <div\n        className={this.props.boxClass}\n        id={this.props.id}\n        onClick={this.selectBox}\n      ></div>\n    );\n  }\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\nvar App = React.memo(Main);\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}